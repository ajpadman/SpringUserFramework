plugins {
  id 'org.springframework.boot' version '2.6.6'
  id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'eclipse'
}

group = 'com.digitalsanctuary.spring'
version = '1.0.0-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	dev
	runtimeClasspath {
		extendsFrom developmentOnly
	}
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect'
	implementation 'org.springframework.boot:spring-boot-starter-web'	
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'
	// implementation 'com.newrelic.telemetry:micrometer-registry-new-relic:0.6.0'
	implementation 'org.passay:passay:1.6.0'
	compileOnly 'org.projectlombok:lombok'
	implementation 'com.google.guava:guava:30.1-jre'
	compileOnly 'javax.validation:validation-api:2.0.1.Final'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'	
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'com.h2database:h2'
}

test {
	useJUnitPlatform()
}


bootJar {
	launchScript {
		properties 'confFolder': '/opt/app/conf/'
	}
}

bootRun {
	// Use Spring Boot DevTool only when we run Gradle bootRun task
	classpath = sourceSets.main.runtimeClasspath + configurations.dev

	if (project.hasProperty('profiles')) {
		environment SPRING_PROFILES_ACTIVE: profiles
	} else {
		def profiles = 'local'
		environment SPRING_PROFILES_ACTIVE: profiles
	}
}
